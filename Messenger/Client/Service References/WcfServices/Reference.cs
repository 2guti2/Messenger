//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.WcfServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfServices.IClientCRUDService")]
    public interface IClientCRUDService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCRUDService/CreateClient", ReplyAction="http://tempuri.org/IClientCRUDService/CreateClientResponse")]
        bool CreateClient(Business.ClientDto client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCRUDService/CreateClient", ReplyAction="http://tempuri.org/IClientCRUDService/CreateClientResponse")]
        System.Threading.Tasks.Task<bool> CreateClientAsync(Business.ClientDto client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCRUDService/UpdateClient", ReplyAction="http://tempuri.org/IClientCRUDService/UpdateClientResponse")]
        bool UpdateClient(Business.ClientDto existingClientDto, Business.ClientDto newClientDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCRUDService/UpdateClient", ReplyAction="http://tempuri.org/IClientCRUDService/UpdateClientResponse")]
        System.Threading.Tasks.Task<bool> UpdateClientAsync(Business.ClientDto existingClientDto, Business.ClientDto newClientDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCRUDService/GetClients", ReplyAction="http://tempuri.org/IClientCRUDService/GetClientsResponse")]
        Business.ClientDto[] GetClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCRUDService/GetClients", ReplyAction="http://tempuri.org/IClientCRUDService/GetClientsResponse")]
        System.Threading.Tasks.Task<Business.ClientDto[]> GetClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCRUDService/DeleteClient", ReplyAction="http://tempuri.org/IClientCRUDService/DeleteClientResponse")]
        bool DeleteClient(Business.ClientDto client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCRUDService/DeleteClient", ReplyAction="http://tempuri.org/IClientCRUDService/DeleteClientResponse")]
        System.Threading.Tasks.Task<bool> DeleteClientAsync(Business.ClientDto client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientCRUDServiceChannel : Client.WcfServices.IClientCRUDService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientCRUDServiceClient : System.ServiceModel.ClientBase<Client.WcfServices.IClientCRUDService>, Client.WcfServices.IClientCRUDService {
        
        public ClientCRUDServiceClient() {
        }
        
        public ClientCRUDServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientCRUDServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientCRUDServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientCRUDServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateClient(Business.ClientDto client) {
            return base.Channel.CreateClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> CreateClientAsync(Business.ClientDto client) {
            return base.Channel.CreateClientAsync(client);
        }
        
        public bool UpdateClient(Business.ClientDto existingClientDto, Business.ClientDto newClientDto) {
            return base.Channel.UpdateClient(existingClientDto, newClientDto);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClientAsync(Business.ClientDto existingClientDto, Business.ClientDto newClientDto) {
            return base.Channel.UpdateClientAsync(existingClientDto, newClientDto);
        }
        
        public Business.ClientDto[] GetClients() {
            return base.Channel.GetClients();
        }
        
        public System.Threading.Tasks.Task<Business.ClientDto[]> GetClientsAsync() {
            return base.Channel.GetClientsAsync();
        }
        
        public bool DeleteClient(Business.ClientDto client) {
            return base.Channel.DeleteClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClientAsync(Business.ClientDto client) {
            return base.Channel.DeleteClientAsync(client);
        }
    }
}
